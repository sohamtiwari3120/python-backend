{
    "question_list": [
        "Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.\n\nIf target is not found in the array, return [-1, -1].\n\nYou must write an algorithm with O(log n) runtime complexity.",
        "You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed. All houses at this place are arranged in a circle. That means the first house is the neighbor of the last one. Meanwhile, adjacent houses have a security system connected, and it will automatically contact the police if two adjacent houses were broken into on the same night.\n\nGiven an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.",
        "There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai.\n\nFor example, the pair [0, 1], indicates that to take course 0 you have to first take course 1.\nReturn the ordering of courses you should take to finish all courses. If there are many valid answers, return any of them. If it is impossible to finish all courses, return an empty array."
    ], 
    "solution_list": [
        "  def searchRange(self, nums: List[int], target: int) -> List[int]:\n        \n        lower_bound = self.findBound(nums, target, True)\n        if (lower_bound == -1):\n            return [-1, -1]\n        \n        upper_bound = self.findBound(nums, target, False)\n        \n        return [lower_bound, upper_bound]\n        \n    def findBound(self, nums: List[int], target: int, isFirst: bool) -> int:\n        \n        N = len(nums)\n        begin, end = 0, N - 1\n        while begin <= end:\n            mid = int((begin + end) / 2)    \n            \n            if nums[mid] == target:\n                \n                if isFirst:\n                    if mid == begin or nums[mid - 1] < target:\n                        return mid\n\n                    end = mid - 1\n                else:\n                    \n                    if mid == end or nums[mid + 1] > target:\n                        return mid\n                    \n                    begin = mid + 1\n            \n            elif nums[mid] > target:\n                end = mid - 1\n            else:\n                begin = mid + 1\n        \n        return -1" ,
        "    def rob(self, nums: List[int]) -> int:\n        if len(nums) < 2:\n            return nums[0]\n        sub_len = len(nums) - 1\n        max_haul_1 = [0] * (2 + sub_len)\n        max_haul_2 = [0] * (2 + sub_len)\n        for i in range(len(nums) - 1):\n            max_haul_1[i+2] = max(max_haul_1[i] + nums[i],\n                 max_haul_1[i+1])\n        for j in range(len(nums) - 1):\n            max_haul_2[j+2] = max(max_haul_2[j] + nums[j + 1],\n                 max_haul_2[j+1])\n        return max(max_haul_1[-1], max_haul_2[-1])",
        "   def findOrder(self, numCourses: int, prerequisites: List[List[int]]) -> List[int]:\n        dep = [[] for i in range(numCourses)]\n        done = set()\n        courses = []\n        for rel in prerequisites: \n            dep[rel[1]].append(rel[0])\n        has_cycle = False\n        def dfs(node):\n            nonlocal has_cycle\n            visited.add(node)\n            if has_cycle:\n                return\n            for child in dep[node]:\n                if child in done:\n                    continue \n                if child in visited:\n                    has_cycle = True\n                else: \n                    dfs(child)\n\n            courses.append(node)\n            done.add(node)\n\n        for i in range(len(dep)):\n            if i not in done: \n                visited = set()\n                dfs(i)\n        return reversed(courses) if not has_cycle else []"
    ]
}